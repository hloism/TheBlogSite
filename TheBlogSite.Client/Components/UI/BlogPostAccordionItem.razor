@if (BlogPost is not null)
{
	<div class="accordion-item">
		<div class="accordion-header">

			<div class="p-2 hstack gap-2">
				<button class="btn btn-outline-primary" @onclick="HandlePublish">
					<i class="bi bi-eye-fill" aria-label="Publish">Publish</i>
				</button>
				<button class="btn btn-outline-primary" @onclick="HandleDraft">
					<i class="bi bi-pencil-fill" aria-label="Drafts">Draft</i>
				</button>

			</div>


			@if (status == Status.Viewing)
			{
				<div class="d-md-flex gap-3 p-3" style="background-color:@(BlogPost.IsPublished ? "#bad9b8" : "#dde3dc")">

					<div><img class="bg-repeat-0 bg-size-cover bg-position-center rounded" src="@(BlogPost.ImageUrl ?? ImageHelper.DefaultBlogImage)" width="285" height="90" alt="Post image"></div>

					<div class="pt-4 pb-sm-4 ps-sm-4 pe-lg-4">
						<h3>
							<a href="posts/@BlogPost.Slug">@BlogPost.Title</a>
						</h3>
						<p class="d-sm-none d-md-block">@BlogPost.Abstract</p>
						<div class="d-flex flex-wrap align-items-center mt-n2">
							<a class="nav-link text-body-secondary fs-sm fw-normal d-flex align-items-end p-0 mt-2" href="/comment">
								@BlogPost.Comments.Count
								<i class="ai-share fs-lg ms-1"></i>
							</a>
							<span class="fs-xs opacity-20 mt-2 mx-3">|</span>
							<span class="fs-sm text-body-secondary mt-2">@BlogPost.Created.ToString("MM.dd.yy")</span>
							<span class="fs-xs opacity-20 mt-2 mx-3">|</span>
							<a class="badge text-nav fs-xs border mt-2" href="/author/posts/categories">@BlogPost.Category?.Name></a>
						</div>

						<div class="p-2 hstack gap-2">
							<a class="btn btn-primary" href="posts/@BlogPost.Slug" role="button">
								<i class="bi bi-eye-fill" aria-label="View BlogPost">View</i>
							</a>
							<a class="btn btn-primary outline" href="/posts/edit/@BlogPost.Id">
								<i class="bi bi-pencil-fill" aria-label="Edit BlogPost">Edit</i>
							</a>

							<a class="btn btn-danger outline" role="button" @onclick="() => status = Status.Deleting">
								<i class="bi bi-trash-fill" aria-label="Delete BlogPost">Delete</i>
							</a>
						</div>
					</div>
				</div>
			}
			else if (status == Status.Deleting)
			{
				<div class="d-md-flex gap-3 p-3">
					<div>
						<i class="bi bi-exclamation-triangle text-danger"></i>
						Are you sure you want to delete this blogpost?
					</div>
					<div class="hstack gap-2 mt-2">
						<button class="btn btn-danger btn-small" @onclick="HandleDelete">
							<i class="bi bi-trash-fill" aria-label="Delete BlogPost"></i>Delete
						</button>
						<button class="btn btn-outline-secondary btn-small" @onclick="() => status = Status.Viewing">
							<i class="bi bi-x text-danger" aria-label="Cancel Delete"></i>Cancel
						</button>
					</div>
				</div>
			}
			else if (status == Status.Editing)
			{
				<EditForm Model="BlogPost" class="d-md-flex gap-3 p-3 align-items-center" OnValidSubmit="HandleUpdate">
					<DataAnnotationsValidator />
					<div class="flex-grow-1 hstack gap-2 align-items-center" role="button">
						<span class="badge bg-secondary rounded-pill small" data-bs-toggle="collapse" data-bs-target="#collapse-@BlogPost.Id">
							@BlogPost.Created.ToString("MM.dd.yy")
						</span>
						<div class="vstack gap-2">
							<InputText @bind-Value="BlogPost.Title" class="form-control" />
							<ValidationMessage For="() => BlogPost.Title" />
						</div>
					</div>

					<div class="mt-2 mt-md-0">
						<span class="text-nowrap">
							<a class="me-3 editIcons" href="/posts/create/@BlogPost.Id"><i class="bi bi-pencil-fill"></i></a>
							<button type="submit" class="btn btn-primary btn-sm me-1">
								<i class="bi bi-floppy"></i>
								Save Changes
							</button>
							<button type="button" class="btn btn-sm btn-danger" @onclick="CancelEdit">
								<i class="bi bi-x"></i>
								Cancel
							</button>
						</span>
					</div>
				</EditForm>
			}
		</div>


		<div id="collapse-@BlogPost.Id" class="accordion-collapse collapse" data-bs-parent="#@AccordionId">
			<div class="accordion-body">
				<ul class="list-group">

					@if (BlogPost.Comments.Count > 0)
					{
						foreach (CommentDTO comment in BlogPost.Comments)
						{
							<li class="list-group-item">
								<a href="posts/edit/@comment.Id" class="hstack gap-3 align-items-center text-decoration-none text-dark">
									<img class="post-preview-img" src="@comment.AuthorImageUrl" alt="Image for @comment.AuthorId" />
									<span>@comment.AuthorName</span>
								</a>
							</li>
						}
					}
					else
					{
						<li class="list-group-item text-center lead text-secondary">
							No blogs in this category
						</li>
					}

				</ul>
			</div>
		</div>
	</div>
}
@code {

	[Parameter, EditorRequired]
	public string? AccordionId { get; set; }

	[Parameter, EditorRequired]
	public BlogPostDTO? BlogPost { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<int> OnDelete { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<BlogPostDTO> OnUpdate { get; set; }

	[Parameter]
	public EventCallback<BlogPostDTO> OnPublish { get; set; }

	[Parameter]
	public EventCallback<BlogPostDTO> OnDraft { get; set; }


	private enum Status
	{
		Viewing,
		Editing,
		Deleting,
	}

	private Status status = Status.Viewing;
	private string? originalName;

	//Add OnParameter Set
	protected override void OnParametersSet()
	{
		if (BlogPost != null)
		{
			originalName = BlogPost.Title;
		}
	}

	private void CancelEdit()
	{
		if (!string.IsNullOrEmpty(originalName))
		{
			BlogPost!.Title = originalName;
		}

		status = Status.Viewing;
	}

	private async Task HandlePublish()
	{
		BlogPost!.IsPublished = true;
		await OnPublish.InvokeAsync(BlogPost);
		status = Status.Viewing;
	}

	private async Task HandleDraft()
	{
		BlogPost!.IsPublished = false;
		await OnDraft.InvokeAsync(BlogPost);
		status = Status.Viewing;
	}

	private async Task HandleDelete()
	{
		await OnDelete.InvokeAsync(BlogPost!.Id);
		status = Status.Viewing;
	}

	private async Task HandleUpdate()
	{
		await OnUpdate.InvokeAsync(BlogPost);
		status = Status.Viewing;


	}
}

