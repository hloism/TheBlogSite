@using TheBlogSite.Client.Helpers
@inject ICategoryService CategoryService
@rendermode InteractiveServer

@if (Category is not null)
{
	<EditForm Model="Category" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />
		<div class="col-12 col-md-4">
			@*Image on left side*@
			<div class="mb-2">
				<img class="img-fluid rounded-3" style="max-height: 350px"
					 src="@(string.IsNullOrEmpty(Category.ImageUrl) ?ImageHelper.DefaultBlogImage : Category.ImageUrl)" />
			</div>
		</div>
		<div class="col-lg-8">
			@*Name*@
			<div class="mb-2">
				<label class="form-label">Name</label>
				<InputText class="form-control" @bind-Value="Category.Name" />
				<ValidationMessage For="() => Category.Name" />
			</div>

			@*Image*@
			<div class="mb-2">
				<label class="form-label">Image</label>
				<InputFile class="form-control mt-3" accept=".png,.jpg,.jpeg,.svg" OnChange="HandleFileChange" />
				<span class="text-danger">@fileError</span>
			</div>

			@*Description*@
			<div class="mb-2">
				<label class="form-label">Description</label>
				<InputTextArea class="form-control" @bind-Value="Category.Description" rows="3" />
				<ValidationMessage For="() => Category.Description" />
			</div>

			<button class="btn btn-primary btn" type="submit">Save</button>
		</div>
	</EditForm>

}


@code {
	[Parameter, EditorRequired]
	public CategoryDTO? Category { get; set; }

	[Parameter, EditorRequired]
	public EventCallback<CategoryDTO> OnSubmit { get; set; }

	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;
	private string? fileError;
	private IEnumerable<CategoryDTO> Posts = [];
	private int[] selectedCategoryIds = [];

	protected override async Task OnInitializedAsync()
	{
		try
		{
			userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);

			//get the categories (private Ienumerable)
			//posts = await CategoryService.GetCategoriesAsync(userInfo!.UserId);

			selectedCategoryIds = Category!.Posts.Select(c => c.Id).ToArray();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
		}
	}

	//list of ID in conjoined table that has been selected , categories will return a category
	private async Task HandleSubmit()
	{
		//Category!.Posts = selectedCategoryIds.Select(id => Posts.First(c => c.Id == id)).ToList();

		if (string.IsNullOrEmpty(Category.ImageUrl))
		{
			Category.ImageUrl = "";
		}

		await OnSubmit.InvokeAsync(Category);
	}


	//HANDLE UPLOADS
	private async Task HandleFileChange(InputFileChangeEventArgs changeEvent)
	{
		fileError = null;
		if (changeEvent.File is null)
		{
			Category!.ImageUrl = ImageHelper.DefaultCategoryImage;

		}
		else if (changeEvent.File.Size > ImageHelper.MaxFileSize)
		{
			fileError = "Images must be less than 5 MB";
		}
		else
		{
			try
			{
				//:"data:image/png;base64,....""
				Category!.ImageUrl = await ImageHelper.GetDataUrl(changeEvent.File);
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex);
				fileError = "Could not read the selected file. Please selected a different file and try again.";
			}

		}

	}

}

