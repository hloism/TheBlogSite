@page "/author/posts/drafts"
@rendermode InteractiveServer

@attribute [Authorize]
@inject IBlogPostService BlogPostService


<div class="container">
	<EditForm Model="formBlogPost" OnValidSubmit="HandleSubmit">
		<DataAnnotationsValidator />

		<h3>Manage Draft Posts</h3>
		<ValidationMessage For="() => formBlogPost.Title" />

	</EditForm>

@* 	<BlogPostAccordion BlogPosts="drafts" OnBlogPostDelete="DeleteBlogPost" OnBlogPostUpdate="UpdateBlogPost" /> *@
	<BlogPublishedAccordion BlogPosts="drafts" OnBlogPostDelete="DeleteBlogPost" OnBlogPostUpdate="UpdateBlogPost" />
</div>

@code {
	[CascadingParameter]
	private Task<AuthenticationState>? AuthStateTask { get; set; }

	private UserInfo? userInfo;
	//holds all the categories for the user

	[SupplyParameterFromQuery]
	public string? Query { get; set; }

	[SupplyParameterFromQuery]
	public int Page { get; set; }

	private int pageSize = 4;


	private IEnumerable<BlogPostDTO> drafts = [];

	//used for the edit form model
	private BlogPostDTO formBlogPost = new BlogPostDTO();


	protected override async Task OnInitializedAsync()
	{
		userInfo = await UserInfoHelper.GetUserInfoAsync(AuthStateTask);
		drafts = await BlogPostService.GetDraftPostsAsync();

	}

	private async Task HandleSubmit()
	{
		try
		{
			await BlogPostService.CreateBlogPostAsync(formBlogPost);
			//clear the form
			formBlogPost = new BlogPostDTO();

			//reload the categories
			//posts = await BlogPostService.GetPublishedPostsAsync(Page, pageSize);
			drafts = await BlogPostService.GetDraftPostsAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}
	}

	private async Task DeleteBlogPost(int blogPostId)
	{
		try
		{
			await BlogPostService.DeleteBlogPostAsync(blogPostId);

			//reload the categories
			//posts = await BlogPostService.GetPublishedPostsAsync(Page, pageSize);
			drafts = await BlogPostService.GetDraftPostsAsync();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex);
			throw;
		}

	}

	private async Task UpdateBlogPost(BlogPostDTO blogPost)
	{
		try
		{
			await BlogPostService.UpdateBlogPostAsync(blogPost);
			//posts = await BlogPostService.GetPublishedPostsAsync(Page, pageSize);
			drafts = await BlogPostService.GetDraftPostsAsync();

		}
		catch (Exception ex)
		{

			Console.WriteLine(ex);
			throw;
		}


	}
}
